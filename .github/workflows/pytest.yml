name: Run Tests with PostgreSQL

on: [push, pull_request] # Automatische Tests bei jedem Push oder Pull Request

jobs:
    test:
        runs-on: ubuntu-latest # Nutzt eine Ubuntu VM als Runner

        services:
            postgres:
                image: postgres:15 # PostgreSQL-Datenbank in Docker
                env:
                    POSTGRES_USER: testuser
                    POSTGRES_PASSWORD: testpassword
                    POSTGRES_DB: testdb
                ports:
                    - 5432:5432 # PostgreSQL für Flask verfügbar machen
                options: >-
                    --health-cmd "pg_isready -U testuser"
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5

        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v5
              with:
                  python-version: "3.13"

            - name: Install Dependencies
              run: |
                  python -m venv venv
                  pip install -r backend/requirements.txt

            - name: Set Environment Variables
              run: |
                  echo "SQLALCHEMY_DATABASE_URI=postgresql://testuser:testpassword@localhost:5432/testdb" >> $GITHUB_ENV
                  echo "SECRET_KEY=mysecretkey" >> $GITHUB_ENV
                  echo "JWT_SECRET_KEY=myjwtsecret" >> $GITHUB_ENV
                  echo "FLASK_APP=backend.app:create_app" >> $GITHUB_ENV
                  echo "FLASK_ENV=testing" >> $GITHUB_ENV

            - name: Set PYTHONPATH
              run: echo "PYTHONPATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV

            - name: Debug Environment Variables (optional)
              run: |
                  echo "FLASK_APP=$FLASK_APP"
                  echo "SQLALCHEMY_DATABASE_URI=$SQLALCHEMY_DATABASE_URI"
                  echo "PYTHONPATH=$PYTHONPATH"

            - name: Run Database Migrations
              run: |
                  python -m flask db upgrade

            - name: Run Tests
              run: |
                  pytest backend/tests --disable-warnings
